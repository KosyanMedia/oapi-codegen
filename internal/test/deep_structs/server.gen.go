// Package deep_structs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/KosyanMedia/oapi-codegen/v2 version (devel) DO NOT EDIT.
package deep_structs

import (
	"github.com/labstack/echo/v4"
)

// Coordinates defines model for Coordinates.
type Coordinates struct {
	Latitude  *float32 `json:"latitude,omitempty"`
	Longitude *float32 `json:"longitude,omitempty"`
}

// Entities defines model for Entities.
type Entities struct {
	Embedded []EntitiesEmbeddedItem `json:"embedded,omitempty"`
}

// EntitiesEmbeddedItem defines model for EntitiesEmbeddedItem.
type EntitiesEmbeddedItem struct {
	Coordinates [][]Coordinates `json:"coordinates,omitempty"`
	Id          int             `json:"id" validate:"required"`
}

// Entity defines model for Entity.
type Entity struct {
	Embedded *EntityEmbedded `json:"embedded,omitempty"`
}

// EntityEmbedded defines model for EntityEmbedded.
type EntityEmbedded struct {
	Coordinate *Coordinates `json:"coordinate,omitempty"`
	Id         int          `json:"id" validate:"required"`
}

// MySlice defines model for MySlice.
type MySlice = []MySliceItem

// MySliceItem defines model for MySliceItem.
type MySliceItem struct {
	Id int `json:"id" validate:"required"`
}

// ResponseEntities defines model for ResponseEntities.
type ResponseEntities = Entities

// ResponseEntity defines model for ResponseEntity.
type ResponseEntity = Entity

// ResponseMySlice defines model for ResponseMySlice.
type ResponseMySlice = MySlice

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /bar)
	Bar(ctx echo.Context) (resp *BarResponse, err error)

	// (GET /baz)
	Baz(ctx echo.Context) (resp *BazResponse, err error)

	// (GET /foo)
	Foo(ctx echo.Context) (resp *FooResponse, err error)
}

type BarResponse struct {
	Code    int
	JSON200 *Entity
}

type BazResponse struct {
	Code    int
	JSON200 MySlice
}

type FooResponse struct {
	Code    int
	JSON200 *Entities
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Bar converts echo context to params.
func (w *ServerInterfaceWrapper) Bar(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	response, err := w.Handler.Bar(ctx)

	if err != nil {
		return err
	}

	if response.JSON200 != nil {
		if response.Code == 0 {
			response.Code = 200
		}
		return ctx.JSON(response.Code, response.JSON200)
	}
	return ctx.NoContent(response.Code)
}

// Baz converts echo context to params.
func (w *ServerInterfaceWrapper) Baz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	response, err := w.Handler.Baz(ctx)

	if err != nil {
		return err
	}

	if response.JSON200 != nil {
		if response.Code == 0 {
			response.Code = 200
		}
		return ctx.JSON(response.Code, response.JSON200)
	}
	return ctx.NoContent(response.Code)
}

// Foo converts echo context to params.
func (w *ServerInterfaceWrapper) Foo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	response, err := w.Handler.Foo(ctx)

	if err != nil {
		return err
	}

	if response.JSON200 != nil {
		if response.Code == 0 {
			response.Code = 200
		}
		return ctx.JSON(response.Code, response.JSON200)
	}
	return ctx.NoContent(response.Code)
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/bar", wrapper.Bar, m...)
	router.GET(baseURL+"/baz", wrapper.Baz, m...)
	router.GET(baseURL+"/foo", wrapper.Foo, m...)

}
