// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/KosyanMedia/oapi-codegen/v2 version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/KosyanMedia/oapi-codegen/v2/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) (resp *FindPetsResponse, err error)
	// Creates a new pet
	// (POST /pets)
	AddPet(ctx echo.Context, requestBody AddPetJSONBody) (resp *AddPetResponse, err error)
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) (resp *DeletePetResponse, err error)
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetByID(ctx echo.Context, id int64) (resp *FindPetByIDResponse, err error)
}

type FindPetsResponse struct {
	Code        int
	JSON200     []Pet
	JSONDefault *Error
}

type AddPetResponse struct {
	Code        int
	JSON201     *Pet
	JSONDefault *Error
}

type DeletePetResponse struct {
	Code        int
	JSONDefault *Error
}

type FindPetByIDResponse struct {
	Code        int
	JSON200     *Pet
	JSONDefault *Error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	if err = runtime.ValidateInput(params); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Invoke the callback with all the unmarshalled arguments
	response, err := w.Handler.FindPets(ctx, params)

	if err != nil {
		return err
	}

	if response.JSON200 != nil {
		if response.Code == 0 {
			response.Code = 200
		}
		return ctx.JSON(response.Code, response.JSON200)
	}
	if response.JSONDefault != nil {
		return ctx.JSON(response.Code, response.JSONDefault)
	}
	return ctx.NoContent(response.Code)
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	var requestBody AddPetJSONBody
	err = ctx.Bind(&requestBody)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Failed to parse request body: %s", err))
	}

	if err = runtime.ValidateInput(requestBody); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Invoke the callback with all the unmarshalled arguments
	response, err := w.Handler.AddPet(ctx, requestBody)

	if err != nil {
		return err
	}

	if response.JSON201 != nil {
		if response.Code == 0 {
			response.Code = 201
		}
		return ctx.JSON(response.Code, response.JSON201)
	}
	if response.JSONDefault != nil {
		return ctx.JSON(response.Code, response.JSONDefault)
	}
	return ctx.NoContent(response.Code)
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	response, err := w.Handler.DeletePet(ctx, id)

	if err != nil {
		return err
	}

	if response.JSONDefault != nil {
		return ctx.JSON(response.Code, response.JSONDefault)
	}
	return ctx.NoContent(response.Code)
}

// FindPetByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	response, err := w.Handler.FindPetByID(ctx, id)

	if err != nil {
		return err
	}

	if response.JSON200 != nil {
		if response.Code == 0 {
			response.Code = 200
		}
		return ctx.JSON(response.Code, response.JSON200)
	}
	if response.JSONDefault != nil {
		return ctx.JSON(response.Code, response.JSONDefault)
	}
	return ctx.NoContent(response.Code)
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets, m...)
	router.POST(baseURL+"/pets", wrapper.AddPet, m...)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet, m...)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetByID, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"W3073d3v/h0AAP//bOkdVFcSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
